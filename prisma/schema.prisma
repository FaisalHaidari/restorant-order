// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  name      String?
  avatar    String?
  phone     String?
  street    String?
  postalCode String?
  city      String?
  country   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  admin     Boolean  @default(false)

  sentMessages     Message[] @relation("SentMessages")
  receivedMessages Message[] @relation("ReceivedMessages")
  orders           Order[]
}

model Category {
  id        Int         @id @default(autoincrement())
  name      String      @unique
  menuItems MenuItem[]
}

model MenuItem {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  price       Float
  image       String?
  categoryId  Int
  category    Category @relation(fields: [categoryId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  orderItems   OrderItem[]
}

model Message {
  id         Int      @id @default(autoincrement())
  senderId   Int
  receiverId Int
  content    String
  createdAt  DateTime @default(now())
  read       Boolean  @default(false)

  sender     User     @relation("SentMessages", fields: [senderId], references: [id])
  receiver   User     @relation("ReceivedMessages", fields: [receiverId], references: [id])
}

model Order {
  id          Int         @id @default(autoincrement())
  user        User        @relation(fields: [userId], references: [id])
  userId      Int
  items       OrderItem[]
  total       Float
  phone       String
  street      String
  buildingNo  String?
  floor       String?
  apartmentNo String?
  description String?
  postalCode  String?
  city        String?
  country     String?
  createdAt   DateTime    @default(now())
}

model OrderItem {
  id        Int      @id @default(autoincrement())
  order     Order    @relation(fields: [orderId], references: [id])
  orderId   Int
  menuItem  MenuItem @relation(fields: [menuItemId], references: [id])
  menuItemId Int
  quantity  Int      @default(1)
  price     Float
}
